/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.tables


import io.github.novemdecillion.DefaultSchema
import io.github.novemdecillion.keys.EVENT_PKEY
import io.github.novemdecillion.tables.records.EventRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EventTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, EventRecord>?,
    aliased: Table<EventRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<EventRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>event</code>
         */
        val EVENT = EventTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<EventRecord> = EventRecord::class.java

    /**
     * The column <code>event.event_id</code>.
     */
    val EVENT_ID: TableField<EventRecord, Long?> = createField(DSL.name("event_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>event.aggregate_id</code>.
     */
    val AGGREGATE_ID: TableField<EventRecord, UUID?> = createField(DSL.name("aggregate_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>event.command_name</code>.
     */
    val COMMAND_NAME: TableField<EventRecord, String?> = createField(DSL.name("command_name"), SQLDataType.VARCHAR(512), this, "")

    /**
     * The column <code>event.payload</code>.
     */
    val PAYLOAD: TableField<EventRecord, JSONB?> = createField(DSL.name("payload"), SQLDataType.JSONB.nullable(false), this, "")

    /**
     * The column <code>event.save_at</code>.
     */
    val SAVE_AT: TableField<EventRecord, OffsetDateTime?> = createField(DSL.name("save_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<EventRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<EventRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>event</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>event</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>event</code> table reference
     */
    constructor(): this(DSL.name("event"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, EventRecord>): this(Internal.createPathAlias(child, key), child, key, EVENT, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<EventRecord, Long?> = super.getIdentity() as Identity<EventRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<EventRecord> = EVENT_PKEY
    override fun getKeys(): List<UniqueKey<EventRecord>> = listOf(EVENT_PKEY)
    override fun `as`(alias: String): EventTable = EventTable(DSL.name(alias), this)
    override fun `as`(alias: Name): EventTable = EventTable(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): EventTable = EventTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): EventTable = EventTable(name, null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<Long?, UUID?, String?, JSONB?, OffsetDateTime?> = super.fieldsRow() as Row5<Long?, UUID?, String?, JSONB?, OffsetDateTime?>
}
