/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.tables.daos


import io.github.novemdecillion.tables.SnapshotTable
import io.github.novemdecillion.tables.pojos.SnapshotEntity
import io.github.novemdecillion.tables.records.SnapshotRecord

import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.JSONB
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SnapshotDao(configuration: Configuration?) : DAOImpl<SnapshotRecord, SnapshotEntity, UUID>(SnapshotTable.SNAPSHOT, SnapshotEntity::class.java, configuration) {

    /**
     * Create a new SnapshotDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: SnapshotEntity): UUID? = o.aggregateId

    /**
     * Fetch records that have <code>aggregate_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfAggregateIdTable(lowerInclusive: UUID?, upperInclusive: UUID?): List<SnapshotEntity> = fetchRange(SnapshotTable.SNAPSHOT.AGGREGATE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>aggregate_id IN (values)</code>
     */
    fun fetchByAggregateIdTable(vararg values: UUID): List<SnapshotEntity> = fetch(SnapshotTable.SNAPSHOT.AGGREGATE_ID, *values)

    /**
     * Fetch a unique record that has <code>aggregate_id = value</code>
     */
    fun fetchOneByAggregateIdTable(value: UUID): SnapshotEntity? = fetchOne(SnapshotTable.SNAPSHOT.AGGREGATE_ID, value)

    /**
     * Fetch records that have <code>event_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfEventIdTable(lowerInclusive: Long?, upperInclusive: Long?): List<SnapshotEntity> = fetchRange(SnapshotTable.SNAPSHOT.EVENT_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>event_id IN (values)</code>
     */
    fun fetchByEventIdTable(vararg values: Long): List<SnapshotEntity> = fetch(SnapshotTable.SNAPSHOT.EVENT_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>payload BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfPayloadTable(lowerInclusive: JSONB?, upperInclusive: JSONB?): List<SnapshotEntity> = fetchRange(SnapshotTable.SNAPSHOT.PAYLOAD, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>payload IN (values)</code>
     */
    fun fetchByPayloadTable(vararg values: JSONB): List<SnapshotEntity> = fetch(SnapshotTable.SNAPSHOT.PAYLOAD, *values)
}
