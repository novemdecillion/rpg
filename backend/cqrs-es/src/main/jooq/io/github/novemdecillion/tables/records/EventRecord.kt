/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.tables.records


import io.github.novemdecillion.tables.EventTable
import io.github.novemdecillion.tables.interfaces.IEvent

import java.time.OffsetDateTime
import java.util.UUID

import org.jooq.Field
import org.jooq.JSONB
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EventRecord() : UpdatableRecordImpl<EventRecord>(EventTable.EVENT), Record5<Long?, UUID?, String?, JSONB?, OffsetDateTime?>, IEvent {

    override var eventId: Long?
        set(value) = set(0, value)
        get() = get(0) as Long?

    override var aggregateId: UUID?
        set(value) = set(1, value)
        get() = get(1) as UUID?

    override var commandName: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    override var payload: JSONB?
        set(value) = set(3, value)
        get() = get(3) as JSONB?

    override var saveAt: OffsetDateTime?
        set(value) = set(4, value)
        get() = get(4) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Long?, UUID?, String?, JSONB?, OffsetDateTime?> = super.fieldsRow() as Row5<Long?, UUID?, String?, JSONB?, OffsetDateTime?>
    override fun valuesRow(): Row5<Long?, UUID?, String?, JSONB?, OffsetDateTime?> = super.valuesRow() as Row5<Long?, UUID?, String?, JSONB?, OffsetDateTime?>
    override fun field1(): Field<Long?> = EventTable.EVENT.EVENT_ID
    override fun field2(): Field<UUID?> = EventTable.EVENT.AGGREGATE_ID
    override fun field3(): Field<String?> = EventTable.EVENT.COMMAND_NAME
    override fun field4(): Field<JSONB?> = EventTable.EVENT.PAYLOAD
    override fun field5(): Field<OffsetDateTime?> = EventTable.EVENT.SAVE_AT
    override fun component1(): Long? = eventId
    override fun component2(): UUID? = aggregateId
    override fun component3(): String? = commandName
    override fun component4(): JSONB? = payload
    override fun component5(): OffsetDateTime? = saveAt
    override fun value1(): Long? = eventId
    override fun value2(): UUID? = aggregateId
    override fun value3(): String? = commandName
    override fun value4(): JSONB? = payload
    override fun value5(): OffsetDateTime? = saveAt

    override fun value1(value: Long?): EventRecord {
        this.eventId = value
        return this
    }

    override fun value2(value: UUID?): EventRecord {
        this.aggregateId = value
        return this
    }

    override fun value3(value: String?): EventRecord {
        this.commandName = value
        return this
    }

    override fun value4(value: JSONB?): EventRecord {
        this.payload = value
        return this
    }

    override fun value5(value: OffsetDateTime?): EventRecord {
        this.saveAt = value
        return this
    }

    override fun values(value1: Long?, value2: UUID?, value3: String?, value4: JSONB?, value5: OffsetDateTime?): EventRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: IEvent) {
        eventId = from.eventId
        aggregateId = from.aggregateId
        commandName = from.commandName
        payload = from.payload
        saveAt = from.saveAt
    }

    override fun <E : IEvent> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised EventRecord
     */
    constructor(eventId: Long? = null, aggregateId: UUID? = null, commandName: String? = null, payload: JSONB? = null, saveAt: OffsetDateTime? = null): this() {
        this.eventId = eventId
        this.aggregateId = aggregateId
        this.commandName = commandName
        this.payload = payload
        this.saveAt = saveAt
    }
}
